Create Module command:
    nest g module user

Controllers: responsible to handle incoming requests and responses to the client.

Providers & Services: responsible for executing the business logic.

Command to check docker version: 
    docker --version

Command to add Prisma:
    npm add -D prisma
    npm add @prisma/client

Command to run Prisma CLI:
    npx prisma init

Command to run docker:
    docker ps

Command to run Prisma Help
    npx prisma --help

Commands for prisma [command]

            init   Set up Prisma for your app
        generate   Generate artifacts (e.g. Prisma Client)
              db   Manage your database schema and lifecycle
         migrate   Migrate your database
          studio   Browse your data with Prisma Studio
          format   Format your schema

Flags

     --preview-feature   Run Preview Prisma commands
  $ prisma migrate dev

  Pull the schema from an existing database, updating the Prisma schema
  $ prisma db pull

  Push the Prisma schema state to the database
  $ prisma db push

  Command to create Service file without spec:
    nest g service prisma --no-spe

DTO = Data Transfer Object

Install Pipe's Class Validator & Class Transformer:
    npm i --save class-validator class-transformer

Install Argon2 for Password Hash:
    npm add argon2

// "db:dev:rm": "docker compose rm dev-db -s -f -v",
// "db:dev:up": "docker compose up dev-db -d",
// "db:dev:restart": "npm run db:dev:rm && npm run db:dev:up",

Command to add config
    npm add @nestjs/config

ALL SOFTWARE & TOOLS I HAVE LEARNED THROUGHOUT THIS TUTORIAL (Other than NestJS):
1) Docker
2) Prisma 
3) ProgreSQL
4) Insomnia - For API Testing
5) Passport JS

Command to add Passport into the project
    npm install --save @nestjs/passport passport   

Command to add JWT into the the project
    npm install --save @nestjs/jwt passport-jwt
    npm install --save-dev @types/passport-jwt